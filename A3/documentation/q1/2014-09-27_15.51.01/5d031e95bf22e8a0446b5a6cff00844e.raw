<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr" lang="en-US">
	<head profile="http://gmpg.org/xfn/11">
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
		<title>Phil Davis - FREE Wrestling Techniques for MMA *VIDEO*</title>
		<link rel="stylesheet" href="http://www.philmrwonderful.com/wp-content/themes/DVP/custom.css" type="text/css" media="screen" />
        <link rel="stylesheet" href="http://www.philmrwonderful.com/fancybox/fancybox/jquery.fancybox-1.3.4.css" type="text/css" media="screen" />
        <style type='text/css'>
		.stpulldown-gradient
		{
			background: #E1E1E1;
			background: -moz-linear-gradient(top, #E1E1E1 0%, #A7A7A7 100%); /* firefox */
			background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,#E1E1E1), color-stop(100%,#A7A7A7)); /* webkit */
			filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#E1E1E1', endColorstr='#A7A7A7',GradientType=0 ); /* ie */
			background: -o-linear-gradient(top, #E1E1E1 0%,#A7A7A7 100%); /* opera */
			color: #636363;
		}
		#stpulldown .stpulldown-logo
		{
			height: 40px;
			width: 300px;
			margin-left: 20px;
			margin-top: 5px;
			background:url('') no-repeat;
		}
</style>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.philmrwonderful.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.philmrwonderful.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 4.0" />
<script charset="utf-8" type="text/javascript">var switchTo5x=true;</script><script charset="utf-8" type="text/javascript" src="http://w.sharethis.com/button/buttons.js"></script><script type="text/javascript">stLight.options({publisher:'wp.f3f46574-d75a-42b7-86d2-2c9a6a6a47fb'});var st_type='wordpress3.6.1';</script>	<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style>
        <script type="text/javascript">
		  var _gaq = _gaq || [];
		  _gaq.push(['_setAccount', 'UA-18958989-7']);
		  _gaq.push(['_trackPageview']);
		  (function() {
			var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
			ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
			var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
		  })();
		</script>
	</head>	<body class="home blog">
		<h1 class="none">Phil 'Mr. Wonderful' Davis | Professional Mixed Martial Arts Fighter &amp; NCAA Division I Wrestling Champion</h1>
        <h2 class="none"><a href="http://www.mediabranches.com/">Web Site Developer To Increase Profits With Online Internet Marketing Strategies And Advertising For Small Businesses Owners</a></h2>
        <div id="container">
        	<h2 class="none">Phil Davis Social Media Links: Pink Ribbon, Phil Davis, Twitter, Facebook</h2>
            <a title="Pink Ribbon" rel="nofollow,external" target="_blank" class="pink" href="http://www.pinkribbon.com/">Pink Ribbon</a>
            <a title="Hypoxico" rel="nofollow,external" target="_blank" class="hydro" href="http://www.hypoxico.com/">Hypoxico</a>
            <a title="Affliction" rel="nofollow,external" target="_blank" class="affliction" href="http://www.afflictionclothing.com/">Affliction</a>
            <a title="MMA Draft" rel="nofollow,external" target="_blank" class="draft" href="https://www.mmadraft.com/">MMA Draft</a>
            <a title="Homepage" class="home" href="/">Phil "Mr.Wonderful" Davis</a>
            <div class="social">
                <a title="Twitter" rel="nofollow,external" target="_blank" href="http://twitter.com/#!/PhilMrWonderful">Twitter</a>
                <a title="Facebook" rel="nofollow,external" target="_blank" href="https://www.facebook.com/philmrwonderful">Facebook</a>
                <a title="RSS Feed" rel="nofollow,external" target="_blank" href="http://feeds.feedburner.com/PhilDavis">RSS</a>
                <a title="Email Feed" rel="nofollow,external" target="_blank" href="http://feedburner.google.com/fb/a/mailverify?uri=PhilDavis&amp;loc=en_US">RSS Email</a>
            </div>
	<h3 class="none">Sign up to the Phil Davis Email List below to watch the video!</h3>
	<p class="none">Get your one of a kind never before seen training session video: Alliance MMA Wretling ran by me!</p>
	<form accept-charset="UTF-8" action="https://nu102.infusionsoft.com/app/form/process/34ec34b5b3e92b7566bd1ab7e096fdbd" class="form infusion-form" method="POST">
        <input name="inf_form_xid" type="hidden" value="34ec34b5b3e92b7566bd1ab7e096fdbd" />
        <input name="inf_form_name" type="hidden" value="Phil Email Opt In" />
        <input name="infusionsoft_version" type="hidden" value="1.25.7.26" />
            <input type="submit" value="&nbsp;" />
            <input title="Enter Your Name*" id="inf_field_FirstName" name="inf_field_FirstName" type="text" />
            <input title="Enter Your Email*" id="inf_field_Email" name="inf_field_Email" type="text" />
    </form>
    <h3 class="none">Phil Davis Wrestling Training Session Video Preview</h3>
    <div class="preview">
        <a rel="media" href="http://www.philmrwonderful.com/wp-content/uploads/2012/06/Phil-Davis-Preview-Three.jpg"><img src="http://www.philmrwonderful.com/wp-content/uploads/2012/06/Phil-Davis-Preview-Three-150x150.jpg" alt="Phil-Davis-Preview-Three" title="Click To Enlarge" width="150" height="150" class="alignright" /></a><a rel="media" href="http://www.philmrwonderful.com/wp-content/uploads/2012/06/Phil-Davis-Preview-One.jpg"><img src="http://www.philmrwonderful.com/wp-content/uploads/2012/06/Phil-Davis-Preview-One-150x150.jpg" alt="Phil-Davis-Preview-One" title="Click To Enlarge" width="150" height="150" class="alignright" /></a><a rel="media" href="http://www.philmrwonderful.com/wp-content/uploads/2012/06/Phil-Davis-Preview-Two.jpg"><img src="http://www.philmrwonderful.com/wp-content/uploads/2012/06/Phil-Davis-Preview-Two-150x150.jpg" alt="Phil-Davis-Preview-Two" title="Click To Enlarge" width="150" height="150" class="alignright" /></a>
        <div class="clear"></div>
    </div>
    <div class="clear"></div>
        <!--<h3 class="none">Phil Davis MMA News</h3>
    <div class="news">
        <ul>
        <br />
<b>Warning</b>:  Invalid argument supplied for foreach() in <b>/home/mooooooose/philmrwonderful.com/wp-content/themes/DVP/index.php</b> on line <b>28</b><br />
        </ul>
    </div>-->
    
		<div class="clear"></div>
	</div><!-- End Container -->
    <p class="none">Thank you for visiting Phil Davis Website | Professional Mixed Martial Arts Fighter &amp; NCAA Division I Wrestling Champion</p>
    <!-- 15 queries. 1.492 seconds. -->
<script type="text/javascript" src="http://www.google.com/jsapi"></script><script type="text/javascript">google.load("jquery", "1.7.1");</script>
<script type="text/javascript" src="/fancybox/fancybox/jquery.mousewheel-3.0.4.pack.js"></script><script type="text/javascript" src="/fancybox/fancybox/jquery.easing-1.3.pack.js"></script>
<script type="text/javascript" src="/fancybox/fancybox/jquery.fancybox-1.3.4.pack.js"></script>
<script type="text/javascript">
// jquery.tweet.js - See http://tweet.seaofclouds.com/ or https://github.com/seaofclouds/tweet for more info
// Copyright (c) 2008-2011 Todd Matthews & Steve Purcell
(function (factory) {
  if (typeof define === 'function' && define.amd)
    define(['jquery'], factory); // AMD support for RequireJS etc.
  else
    factory(jQuery);
}(function ($) {
  $.fn.tweet = function(o){
    var s = $.extend({
      username: null,                           // [string or array] required unless using the 'query' option; one or more twitter screen names (use 'list' option for multiple names, where possible)
      list: null,                               // [string]   optional name of list belonging to username
      favorites: false,                         // [boolean]  display the user's favorites instead of his tweets
      query: null,                              // [string]   optional search query (see also: http://search.twitter.com/operators)
      avatar_size: null,                        // [integer]  height and width of avatar if displayed (48px max)
      count: 3,                                 // [integer]  how many tweets to display?
      fetch: null,                              // [integer]  how many tweets to fetch via the API (set this higher than 'count' if using the 'filter' option)
      page: 1,                                  // [integer]  which page of results to fetch (if count != fetch, you'll get unexpected results)
      retweets: true,                           // [boolean]  whether to fetch (official) retweets (not supported in all display modes)
      intro_text: null,                         // [string]   do you want text BEFORE your your tweets?
      outro_text: null,                         // [string]   do you want text AFTER your tweets?
      join_text:  null,                         // [string]   optional text in between date and tweet, try setting to "auto"
      auto_join_text_default: "I said,",        // [string]   auto text for non verb: "I said" bullocks
      auto_join_text_ed: "I",                   // [string]   auto text for past tense: "I" surfed
      auto_join_text_ing: "I am",               // [string]   auto tense for present tense: "I was" surfing
      auto_join_text_reply: "I replied to",     // [string]   auto tense for replies: "I replied to" @someone "with"
      auto_join_text_url: "I was looking at",   // [string]   auto tense for urls: "I was looking at" http:...
      loading_text: null,                       // [string]   optional loading text, displayed while tweets load
      refresh_interval: null,                   // [integer]  optional number of seconds after which to reload tweets
      twitter_url: "twitter.com",               // [string]   custom twitter url, if any (apigee, etc.)
      twitter_api_url: "api.twitter.com",       // [string]   custom twitter api url, if any (apigee, etc.)
      twitter_search_url: "search.twitter.com", // [string]   custom twitter search url, if any (apigee, etc.)
      template: "{avatar}{time}{join}{text}",   // [string or function] template used to construct each tweet <li> - see code for available vars
      comparator: function(tweet1, tweet2) {    // [function] comparator used to sort tweets (see Array.sort)
        return tweet2["tweet_time"] - tweet1["tweet_time"];
      },
      filter: function(tweet) {                 // [function] whether or not to include a particular tweet (be sure to also set 'fetch')
        return true;
      }
      // You can attach callbacks to the following events using jQuery's standard .bind() mechanism:
      //   "loaded" -- triggered when tweets have been fetched and rendered
    }, o);

    // See http://daringfireball.net/2010/07/improved_regex_for_matching_urls
    var url_regexp = /\b((?:https?:\/\/|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/gi;

    // Expand values inside simple string templates with {placeholders}

    function t(template, info) {
      if (typeof template === "string") {
        var result = template;
        for(var key in info) {
          var val = info[key];
          result = result.replace(new RegExp('{'+key+'}','g'), val === null ? '' : val);
        }
        return result;
      } else return template(info);
    }
    // Export the t function for use when passing a function as the 'template' option
    $.extend({tweet: {t: t}});

    function replacer (regex, replacement) {
      return function() {
        var returning = [];
        this.each(function() {
          returning.push(this.replace(regex, replacement));
        });
        return $(returning);
      };
    }

    function escapeHTML(s) {
      return s.replace(/</g,"&lt;").replace(/>/g,"^&gt;");
    }

    $.fn.extend({
      linkUser: replacer(/(^|[\W])@(\w+)/gi, "$1<span class=\"at\">@</span><a href=\"http://"+s.twitter_url+"/$2\">$2</a>"),
      // Support various latin1 (\u00**) and arabic (\u06**) alphanumeric chars
      linkHash: replacer(/(?:^| )[\#]+([\w\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u00ff\u0600-\u06ff]+)/gi,
                         ' <a href="http://'+s.twitter_search_url+'/search?q=&tag=$1&lang=all'+
                         ((s.username && s.username.length == 1 && !s.list) ? '&from='+s.username.join("%2BOR%2B") : '')+
                         '" class="tweet_hashtag">#$1</a>'),
      makeHeart: replacer(/(&lt;)+[3]/gi, "<tt class='heart'>&#x2665;</tt>")
    });

    function linkURLs(text, entities) {
      return text.replace(url_regexp, function(match) {
        var url = (/^[a-z]+:/i).test(match) ? match : "http://"+match;
        var text = match;
        for(var i = 0; i < entities.length; ++i) {
          var entity = entities[i];
          if (entity.url == url && entity.expanded_url) {
            url = entity.expanded_url;
            text = entity.display_url;
            break;
          }
        }
        return "<a href=\""+escapeHTML(url)+"\">"+escapeHTML(text)+"</a>";
      });
    }

    function parse_date(date_str) {
      // The non-search twitter APIs return inconsistently-formatted dates, which Date.parse
      // cannot handle in IE. We therefore perform the following transformation:
      // "Wed Apr 29 08:53:31 +0000 2009" => "Wed, Apr 29 2009 08:53:31 +0000"
      return Date.parse(date_str.replace(/^([a-z]{3})( [a-z]{3} \d\d?)(.*)( \d{4})$/i, '$1,$2$4$3'));
    }

    function extract_relative_time(date) {
      var toInt = function(val) { return parseInt(val, 10); };
      var relative_to = new Date();
      var delta = toInt((relative_to.getTime() - date) / 1000);
      if (delta < 1) delta = 0;
      return {
        days:    toInt(delta / 86400),
        hours:   toInt(delta / 3600),
        minutes: toInt(delta / 60),
        seconds: toInt(delta)
      };
    }

    function format_relative_time(time_ago) {
      if ( time_ago.days > 2 )     return 'about ' + time_ago.days + ' days ago';
      if ( time_ago.hours > 24 )   return 'about a day ago';
      if ( time_ago.hours > 2 )    return 'about ' + time_ago.hours + ' hours ago';
      if ( time_ago.minutes > 45 ) return 'about an hour ago';
      if ( time_ago.minutes > 2 )  return 'about ' + time_ago.minutes + ' minutes ago';
      if ( time_ago.seconds > 1 )  return 'about ' + time_ago.seconds + ' seconds ago';
      return 'just now';
    }

    function build_auto_join_text(text) {
      if (text.match(/^(@([A-Za-z0-9-_]+)) .*/i)) {
        return s.auto_join_text_reply;
      } else if (text.match(url_regexp)) {
        return s.auto_join_text_url;
      } else if (text.match(/^((\w+ed)|just) .*/im)) {
        return s.auto_join_text_ed;
      } else if (text.match(/^(\w*ing) .*/i)) {
        return s.auto_join_text_ing;
      } else {
        return s.auto_join_text_default;
      }
    }

    function build_api_url() {
      var proto = ('https:' == document.location.protocol ? 'https:' : 'http:');
      var count = (s.fetch === null) ? s.count : s.fetch;
      var common_params = '&include_entities=1&callback=?';
      if (s.list) {
        return proto+"//"+s.twitter_api_url+"/1/"+s.username[0]+"/lists/"+s.list+"/statuses.json?page="+s.page+"&per_page="+count+common_params;
      } else if (s.favorites) {
        return proto+"//"+s.twitter_api_url+"/favorites/"+s.username[0]+".json?page="+s.page+"&count="+count+common_params;
      } else if (s.query === null && s.username.length == 1) {
        return proto+'//'+s.twitter_api_url+'/1/statuses/user_timeline.json?screen_name='+s.username[0]+'&count='+count+(s.retweets ? '&include_rts=1' : '')+'&page='+s.page+common_params;
      } else {
        var query = (s.query || 'from:'+s.username.join(' OR from:'));
        return proto+'//'+s.twitter_search_url+'/search.json?&q='+encodeURIComponent(query)+'&rpp='+count+'&page='+s.page+common_params;
      }
    }

    function extract_avatar_url(item, secure) {
      if (secure) {
        return ('user' in item) ?
          item.user.profile_image_url_https :
          extract_avatar_url(item, false).
            replace(/^http:\/\/[a-z0-9]{1,3}\.twimg\.com\//, "https://s3.amazonaws.com/twitter_production/");
      } else {
        return item.profile_image_url || item.user.profile_image_url;
      }
    }

    // Convert twitter API objects into data available for
    // constructing each tweet <li> using a template
    function extract_template_data(item){
      var o = {};
      o.item = item;
      o.source = item.source;
      o.screen_name = item.from_user || item.user.screen_name;
      // The actual user name is not returned by all Twitter APIs, so please do not
      // file an issue if it is empty:
      o.name = item.from_user_name || item.user.name;
      o.avatar_size = s.avatar_size;
      o.avatar_url = extract_avatar_url(item, (document.location.protocol === 'https:'));
      o.retweet = typeof(item.retweeted_status) != 'undefined';
      o.tweet_time = parse_date(item.created_at);
      o.join_text = s.join_text == "auto" ? build_auto_join_text(item.text) : s.join_text;
      o.tweet_id = item.id_str;
      o.twitter_base = "http://"+s.twitter_url+"/";
      o.user_url = o.twitter_base+o.screen_name;
      o.tweet_url = o.user_url+"/status/"+o.tweet_id;
      o.reply_url = o.twitter_base+"intent/tweet?in_reply_to="+o.tweet_id;
      o.retweet_url = o.twitter_base+"intent/retweet?tweet_id="+o.tweet_id;
      o.favorite_url = o.twitter_base+"intent/favorite?tweet_id="+o.tweet_id;
      o.retweeted_screen_name = o.retweet && item.retweeted_status.user.screen_name;
      o.tweet_relative_time = format_relative_time(extract_relative_time(o.tweet_time));
      o.entities = item.entities ? (item.entities.urls || []).concat(item.entities.media || []) : [];
      o.tweet_raw_text = o.retweet ? ('RT @'+o.retweeted_screen_name+' '+item.retweeted_status.text) : item.text; // avoid '...' in long retweets
      o.tweet_text = $([linkURLs(o.tweet_raw_text, o.entities)]).linkUser().linkHash()[0];
      o.tweet_text_fancy = $([o.tweet_text]).makeHeart()[0];

      // Default spans, and pre-formatted blocks for common layouts
      o.user = t('<a class="tweet_user" href="{user_url}">{screen_name}</a>', o);
      o.join = s.join_text ? t(' <span class="tweet_join">{join_text}</span> ', o) : ' ';
      o.avatar = o.avatar_size ?
        t('<a class="tweet_avatar" href="{user_url}"><img src="{avatar_url}" height="{avatar_size}" width="{avatar_size}" alt="{screen_name}\'s avatar" title="{screen_name}\'s avatar" border="0"/></a>', o) : '';
      o.time = t('<span class="tweet_time"><a href="{tweet_url}" title="view tweet on twitter">{tweet_relative_time}</a></span>', o);
      o.text = t('<span class="tweet_text">{tweet_text_fancy}</span>', o);
      o.reply_action = t('<a class="tweet_action tweet_reply" href="{reply_url}">reply</a>', o);
      o.retweet_action = t('<a class="tweet_action tweet_retweet" href="{retweet_url}">retweet</a>', o);
      o.favorite_action = t('<a class="tweet_action tweet_favorite" href="{favorite_url}">favorite</a>', o);
      return o;
    }

    function load(widget) {
      var intro = '<p class="tweet_intro">'+s.intro_text+'</p>';
      var outro = '<p class="tweet_outro">'+s.outro_text+'</p>';
      var loading = $('<p class="loading">'+s.loading_text+'</p>');
      if (s.loading_text) $(widget).not(":has(.tweet_list)").empty().append(loading);
      $.getJSON(build_api_url(), function(data){
        var list = $('<ul class="tweet_list">');
        var tweets = $.map(data.results || data, extract_template_data);
        tweets = $.grep(tweets, s.filter).sort(s.comparator).slice(0, s.count);
        list.append($.map(tweets, function(o) { return "<li>" + t(s.template, o) + "</li>"; }).join('')).
          children('li:first').addClass('tweet_first').end().
          children('li:odd').addClass('tweet_even').end().
          children('li:even').addClass('tweet_odd');

        $(widget).empty().append(list);
        if (s.intro_text) list.before(intro);
        if (s.outro_text) list.after(outro);

        $(widget).trigger("loaded").trigger((tweets.length === 0 ? "empty" : "full"));
        if (s.refresh_interval) {
          window.setTimeout(function() { $(widget).trigger("tweet:load"); }, 1000 * s.refresh_interval);
        }
      });
    }

    return this.each(function(i, widget){
      if(s.username && typeof(s.username) == "string"){
        s.username = [s.username];
      }

      $(widget).unbind("tweet:load").bind("tweet:load", function(){
        load(widget);
      }).trigger("tweet:load");
    });
  };
}));
	google.setOnLoadCallback(function() {
	  jQuery(function($){
        $("#ticker").tweet({
          username: "philmrwonderful",
          page: 1,
          avatar_size: 64,
          count: 20,
          loading_text: "loading ..."
        }).bind("loaded", function() {
          var ul = $(this).find(".tweet_list");
          var ticker = function() {
            setTimeout(function() {
              ul.find('li:first').animate( {marginTop: '-6em'}, 800, function() {
                $(this).detach().appendTo(ul).removeAttr('style');
              });
              ticker();
            }, 5000);
          };
          ticker();
        });
		$(':input[title]').each(function() {var $this = $(this);if($this.val() === '') { $this.val($this.attr('title')); }$this.focus(function() { if($this.val() === $this.attr('title')) { $this.val(''); } }); $this.blur(function() { if($this.val() === '') { $this.val($this.attr('title')); } });});
		$('a[rel=media]').fancybox({ 'transitionIn' : 'elastic', 'transitionOut' : 'elastic','centerOnScroll' : true });
		setTimeout(function(){$('#autostart').fancybox().trigger('click');},1500);
      });
	});
</script>
<script type="text/javascript" src="https://nu102.infusionsoft.com/app/webTracking/getTrackingCode?trackingId=e09742fbf445512507ee8ee14c4ef03c"></script>
</body>
</html>